{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categ","placeholder","type","value","onChange","target","protoTypes","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categorias","setcategorias","categoria","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OAEI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAK,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAKlB,SACA,uBACAO,YAAY,aACZC,KAAK,OACLC,MAASV,EACTW,SApBsB,SAACR,GACvBF,EAAcE,EAAES,OAAOF,aA2B/Bb,EAAYgB,WAAa,CACrBf,cAAegB,IAAUC,KAAKC,Y,mCCnCnBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfC,EAFe,gDAEgCC,UAAUH,GAF1C,+DAGFI,MAAMF,GAHJ,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAExB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXrB,kBAelBM,GAfkB,4CAAH,sDCCTO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,yCAAf,UACA,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCACO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECLwB,SAACA,GAEzB,MAA0BnB,mBAAS,CAC/B0B,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACJf,KAAMkB,EACNL,SAAS,SAKxB,CAACpB,IACAqB,EDd4BK,CAAa1B,GAAnC2B,EAAb,EAAOpB,KAAgBa,EAAvB,EAAuBA,QAKvB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACV,qBAAKA,UAAU,YAAf,SAGUW,EAASlB,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEIA,GADGA,EAAIC,aEenBiB,EAjCK,WAEjB,MAAoC/C,mBAAS,CAAC,mBAA9C,mBAAOgD,EAAP,KAAmBC,EAAnB,KASA,OACI,qCACA,+CAEA,cAAC,EAAD,CAAalD,cAAekD,IAC5B,uBAGA,6BAEQD,EAAWpB,KAAI,SAAAsB,GAAS,OACpB,cAAC,EAAD,CAEA/B,SAAW+B,GADJA,Y,MCrB3BC,IAASC,OACJ,cAAC,EAAD,IAEHC,SAASC,eAAe,W","file":"static/js/main.44ee2a68.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n       \r\n\r\n    }\r\n    \r\n    const handleSumbit = (e)=>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setcategories(categ=> [inputValue, ...categ]);\r\n            setInputValue('');\r\n        }\r\n     }\r\n    return (\r\n        \r\n        <form onSubmit={handleSumbit}>\r\n        <input\r\n        placeholder=\"Ingrese...\"\r\n        type=\"text\"\r\n        value = {inputValue}\r\n        onChange={handleInputChange}\r\n        />\r\n \r\n        </form>\r\n       \r\n    )\r\n}\r\n\r\nAddCategory.protoTypes = {\r\n    setcategories: PropTypes.func.isRequired\r\n}","  ///hacemos peticion http\r\n  export const getGifs = async(category) =>{\r\n\r\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=25&api_key=dKCLxGlH18mHOazHBUlrXRQZX1Y4z2b3`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        //de esa manera traemos los datos que solamente queremos\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\nreturn gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n        <img src={url} alt={title}/>    \r\n        <p>{title}</p>\r\n\r\n       </div>\r\n    )\r\n}\r\n","\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data: imagenes, loading} =  useFetchGifs(category);\r\n //  const [images, setimages] = useState([]);\r\n     \r\n    \r\n  \r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash\">Loding...</p>}\r\n          <div className=\"card-grid\">\r\n   \r\n                {\r\n                    imagenes.map( img => (\r\n                        <GifGridItem \r\n                        key = {img.id}\r\n                        {...img}\r\n                        />))\r\n                    }\r\n   \r\n        </div> \r\n      </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\n import {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    //useEffect es para que solo se dispare 1 vez\r\n    useEffect( () =>{\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n \r\n                    setState({\r\n                         data: imgs,\r\n                         loading: false\r\n                     });\r\n            }) \r\n        \r\n            \r\n        },[category]) \r\n    return state;\r\n\r\n\r\n\r\n}","\r\nimport {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nconst GifExpertApp = () =>{\r\n     \r\n    const [categorias, setcategorias] = useState(['homero simpson']);\r\n\r\n    /* const handleAdd = () =>{\r\n        const valor = 'Michael Jackson';\r\n        //de esta manera agregamos el valor al arreglo.\r\n       // setcategorias([...categorias, valor]);\r\n        //otra manera\r\n        setcategorias(categori =>[...categori,valor]);\r\n    } */\r\n    return(\r\n        <>  \r\n        <h1> Busca un gif</h1>\r\n        {/* Asi podemos llamar a componentes dentro de otros componentes */}\r\n        <AddCategory setcategories={setcategorias}/>  \r\n        <hr></hr>\r\n   \r\n        \r\n        <ol>\r\n            {\r\n                categorias.map(categoria=>(\r\n                    <GifGrid \r\n                    key = {categoria}\r\n                    category ={categoria}/ > \r\n                ))\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n    );\r\n\r\n}\r\nexport default  GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n \n\nReactDOM.render(\n     <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n "],"sourceRoot":""}